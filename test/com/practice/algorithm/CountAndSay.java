package com.practice.algorithm;

import java.util.Hashtable;
import java.util.Map;

/*
Find the n’th term in count-and-say. The count-and-say sequence is the sequence of below integers:
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

How is above sequence generated?
n’th term in generated by reading (n-1)’th term.

The first term is "1"

Second term is "11", generated by reading first term as "One 1" 
(There is one 1 in previous term)

Third term is "21", generated by reading second term as "Two 1"

Fourth term is "1211", generated by reading third term as "One 2 One 1" 

and so on

Assume that 0 < n <= 30

Example:
Input: n = 3
Output: 21

Input: n = 5
Output: 111221
*/
public class CountAndSay {
	 public static String countAndSay(int n) {
		 String one = "1";
		 String two = "11";
		 
		 if(n == 1) {
			 return one;
		 }
		 
		 if(n == 2) {
			 return two;
		 }
		 
		 String currentNumber = two;
		 Map<Character, Integer> count = new Hashtable<>();
		 char lastChar;
		 for(int i = 3; i <= n; i++) {
			 StringBuilder sb = new StringBuilder();
			 lastChar = currentNumber.charAt(0);
			 for(char c : currentNumber.toCharArray()) {
				 if(c == lastChar) {
					 if(count.containsKey(c)) {
						 count.put(c, count.get(c) + 1);
					 } else {
						 count.put(c, 1);
					 }
				 } else {
					 sb.append(count.get(lastChar)).append(lastChar);
					 count.remove(lastChar);
					 count.put(c, 1);
					 lastChar = c;
				 }
				 
			 }
			 
			 sb.append(count.get(lastChar)).append(lastChar);
			 currentNumber = sb.toString();
			 count = new Hashtable<>();
			 
		 }
		 
		 return currentNumber;
	 }
	 
	 public static void main(String[] args) {
		 test(1);
		 test(2);
		 test(3);
		 test(4);
		 test(5);
		 test(6);
		 test(7);
		 test(8);
	 }
	 
	 private static void test(int n) {
		 String output = countAndSay(n);
		 System.out.println(output);
	 }

}
